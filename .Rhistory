2+3
install.packages("party")
library(party)
data <- iris
data = iris
data
library(party)
data<- iris
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
testing <- Data[Sample,]
Data <- iris
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
testing <- Data[Sample,]
library(party)
Data <- iris
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
testing <- Data[Sample,]
learning <-Data[-Sample,]
output.tree <-ctree(Species ~Sepal.Length +Sepal.Width +Petal.Length +Petal.Width,data =learning)
plot(output.tree)
#Hitung Akurasi Prediksi
CM <- table(testing[,5],Prediksi]
#Hitung Akurasi Prediksi
CM <- table(testing[,5],Prediksi)
#Hitung Akurasi Prediksi
CM <- table(testing[,5])
CM
accuracy <- sum(diag(CM))/sum(CM)
accuracy
#Hitung Akurasi Prediksi
CM <- table(testing[, 5],Prediksi)
CM
accuracy <- sum(diag(CM))/sum(CM)
CM
#Hitung Akurasi Prediksi
CM <- table(testing[, 5],test)
#Hitung Akurasi Prediksi
CM <- table(testing[, 5], Predict())
#Hitung Akurasi Prediksi
CM <- table(testing[, 5], Prediksi)
CM
accuracy <- sum(diag(CM))/sum(CM)
accuracy
library(party)
Data <- iris
install.packages("rJava")
#Hitung Akurasi Prediksi
Prediksi = predict(output.tree,testing)
Prediksi
CM <- table(testing[, 5], Prediksi)
Prediksi
CM <- table(testing[, 5], Prediksi)
CM
accuracy <- sum(diag(CM))/sum(CM)
accuracy
library(party)
Data <- iris
install.packages("RWeka")
library(party)
Data <- iris
install.packages("partykit")
library(party)
Data <- iris
library(rJava)
library(party)
Data <- iris
library(RWeka)
2+3
library("partykit", lib.loc="D:/Program/Python/Anaconda/envs/rstudio/lib/R/library")
data <- iris
knitr::opts_chunk$set(echo = TRUE)
library(rJava)
library(RWeka)
library(partykit)
library(partykit)
Data =iris
output.tree <- J48(Species ~Sepal.Length +Sepal.Width +Petal.Length +Petal.Width,data =learning)
library(rJava)
library(RWeka)
library(partykit)
Data =iris
output.tree <- J48(Species ~Sepal.Length +Sepal.Width +Petal.Length +Petal.Width,data =learning)
#Membagi data trining dan data testing
Sample <- sample(1:150,50)
testing <- Data[Sample,]
learning <-Data[-Sample,]
output.tree <-ctree(Species ~Sepal.Length +Sepal.Width +Petal.Length +Petal.Width,data =learning)
plot(output.tree)
#Hitung Akurasi Prediksi
Prediksi = predict(output.tree,testing)
Prediksi
CM
CM <- table(testing[, 5], Prediksi)
CM
accuracy <- sum(diag(CM))/sum(CM)
accuracy
Data =iris
output.tree <- J48(Species ~Sepal.Length +Sepal.Width +Petal.Length +Petal.Width,data =learning)
plot(output.tree)
#Pengujian Data TEsting
Prediksi = predict(output.tree,testing)
Prediksi
CM <- table(testing[ , 5], Prediksi)
accuracy <- (sum(diag(CM)))/sum(CM)
CM <- table(testing[ , 5], Prediksi)
CM
accuracy <- (sum(diag(CM)))/sum(CM)
accuracy
#membuat data frame secara acak 2 atribut serta satu label
set.seed(10111)
x = matrix(rnorm(40), 20, 2);
y = rep(c(-1, 1), c(10, 10))
plot(x, col = y + 3, pch = 19)
#Transformasi kelas y=1
x[y == 1,] = x[y == 1,] + 1
plot(x, col = y + 3, pch = 19, main="Data Training")
#membuat data frame untuk Training Data
dat = data.frame(x, y = as.factor(y))
#Inisialisasi model SVM
library(e1071)
model_linear = svm(y ~ ., data = dat, kernel = "linear")
plot(model_linear, dat, main = "Model SVM Linear")
summary(model_linear)
model_radial = svm(y ~ ., data = dat, kernel = "radial")
plot(model_radial, dat)
summary(model_radial)
#membuat data frame untuk Training Data
dat = data.frame(x, y = as.factor(y))
#Inisialisasi model SVM
library(e1071)
#Inisialisasi model SVM
install.packages(e1071)
#Inisialisasi model SVM
install.packages(e1071)
library(e1071)
#Inisialisasi model SVM
install.packages(e1071)
library(e1071)
model_linear = svm(y ~ ., data = dat, kernel = "linear")
library(e1071)
model_linear = svm(y ~ ., data = dat, kernel = "linear")
plot(model_linear, dat, main = "Model SVM Linear")
summary(model_linear)
model_radial = svm(y ~ ., data = dat, kernel = "radial")
plot(model_radial, dat)
summary(model_radial)
model_polinomial = svm(y ~ ., data = dat, kernel = "polynomial")
plot(model_polinomial, dat)
summary(model_polinomial)
#membuat Testing Data
set.seed(100)
x_2 = matrix(rnorm(32), 16, 2);
y_2 = rep(c(-1, 1), c(8, 8))
x_2[y_2 == 1,] = x_2[y_2 == 1,] + 1
plot(x_2, col = y_2 + 3, pch = 19, main = "Data Testing")
tes = data.frame(x_2, y_2 = as.factor(y_2))
#Testing dan prediksi data
linear_pred <- predict(model_linear, newdata = tes [,1:2])
radial_pred <- predict(model_radial, newdata = tes [,1:2])
hasil = data.frame(tes$y, linear_pred, radial_pred, polinomial_pred)
#Evaluasi Model
library(caret)
#Evaluasi Model
install.packages("caret")
library(e1071)
x
y
plot(x, col = y + 3, pch = 19)
x = matrix(rnorm(40), 20, 2);
x = matrix(rnorm(40), 20, 2);
y = rep(c(-1, 1), c(10, 10))
plot(x, col = y + 3, pch = 19)
#membuat data frame secara acak 2 atribut serta satu label
set.seed(10111)
x = matrix(rnorm(40), 20, 2);
y = rep(c(-1, 1), c(10, 10))
x
y
plot(x, col = y + 3, pch = 19)
x = matrix(rnorm(40), 20, 2);
y = rep(c(-1, 1), c(10, 10))
plot(x, col = y + 3, pch = 19)
x = matrix(rnorm(40), 20, 2);
y = rep(c(-1, 1), c(10, 10))
plot(x, col = y + 3, pch = 19)
#Transformasi kelas y=1
x[y == 1,] = x[y == 1,] + 1
plot(x, col = y + 3, pch = 19, main="Data Training")
source('~/.active-rstudio-document', echo=TRUE)
col
plot(x, col = y + 3, pch = 19)
#Transformasi kelas y=1
x[y == 1,] = x[y == 1,] + 1
plot(x, col = y + 3, pch = 19, main="Data Training")
install.packages("dbscan")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dbscan")
install.packages("factoextra")
install.packages("cluster")
install.packages("ggplot2")
install.packages("leaflet")
install.packages("ggthemes")
install.packages("fishualize")
library(dplyr)
# clustering libs
library(dbscan)
library(factoextra)
library(cluster)
# visualization libs
library(ggplot2)
library(leaflet)
library(ggthemes)
library(fishualize)
data("multishapes")
multishapes <- multishapes[,1:2]
dim(multishapes)
multishapes
ggplot(data = multishapes, aes(x = x, y = y)) +
geom_point(col = "firebrick4") +
theme_pander()
kNNdistplot(multishapes, k = 4)
abline(h = 0.15, col = "red", lty = 2)
kNNdistplot(multishapes, k = 4)
abline(h = 0.15, col = "red", lty = 2)
kNNdistplot(multishapes, k = 4)
abline(h = 0.15, col = "red", lty = 2)
kNNdistplot(multishapes, k = 4)
abline(h = 0.15, col = "red", lty = 2)
abline( col = "red", lty = 2)
abline(h = 0.20, col = "red", lty = 2)
db_clust <- dbscan(multishapes, eps = 0.15, minPts = 4)
db_clust
db_clust <- dbscan(multishapes, eps = 0.15, minPts = 4)
db_clust
multishapes <- multishapes %>%
mutate(clust = db_clust$cluster,
clust = ifelse(clust==0,"Noise",clust))
multishapes
ggplot(data =multishapes, aes(x = x, y = y)) +
geom_point(aes(col = as.factor(clust))) +
theme_pander() +
labs(col = "Cluster")
db_clust <- dbscan(multishapes[,1:2], eps = 0.2, minPts = 4)
db_clust
multishapes <- multishapes %>%
mutate(clust = db_clust$cluster,
clust = ifelse(clust==0,"Noise",clust))
ggplot(data =multishapes, aes(x = x, y = y)) +
geom_point(aes(col = as.factor(clust))) +
theme_pander() +
labs(col = "Cluster")
abline(h= 0.8, col = "red", lty = 3)
kNNdistplot(multishapes, k = 4)
kNNdistplot(multishapes, k = 4)
data("multishapes")
multishapes <- multishapes[,1:2]
dim(multishapes)
ggplot(data = multishapes, aes(x = x, y = y)) +
geom_point(col = "firebrick4") +
theme_pander()
kNNdistplot(multishapes, k = 4)
nasa_fire <- readr::read_csv('nasa1.csv')
head(nasa_fire)
nasa_fire
leaflet(data = nasa_fire) %>%
addTiles() %>%
setView(lng = 133.7751,lat = -25.2744,zoom =  4) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
radius =1)
multishapes
nasa_fire[,1:2]
kNNdistplot(nasa_fire[,1:2], k = 10)
abline(h= 0.8, col = "red", lty = 3)
kNNdistplot(nasa_fire[,1:2], k = 10)
nasa_clust <- dbscan(nasa_fire[,1:2], eps = 0.8, minPts = 10)
nasa_clust <- dbscan(nasa_fire[,1:2], eps = 0.8, minPts = 10)
nasa_clust
# membuat kolom baru untuk cluster
nasa_fire <- nasa_fire %>%
mutate(clust = nasa_clust$cluster)
# membuat pallet color untuk setiap cluster
pallet <- fishualize::fish(n = length(unique(nasa_fire$clust)), option = "Bryaninops_natans")
pal <- colorFactor(pallet, domain = unique(nasa_fire$clust))
# visualisasi cluser tanpa data noise
leaflet(data = nasa_fire[nasa_fire$clust !=0,]) %>%
addTiles() %>%
setView(lng = 133.7751,lat = -25.2744,zoom =  4) %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
radius =1,
color = ~pal(clust))
mtcars
mean(mtcars)
mean(mtcars[,1:7])
mtcars[,1:5]
mtcars[,1]
mtcars[,1:5]
mtcars[,1,3,4,5]
:5
mtcars[,1:5]
x =mtcars[,1:5]
x
x[['mpg']]
x[['mpg','disp','hp','dart']]
x[['mpg'],['disp']]
x =mtcars[,1:3:4:5]
x =mtcars[,c(1,3,4,5)]
mtcars[,c(1,3,4,5)]
x =mtcars[,c(1,3,4,5)]
mean(x)
sum(x)
colMeans(x)
colSums(x)
x
var(x)
cov(x)
cor(x)
pairs(x)
x1 = dataset[,c(3,5,7)]
setwd("~/")
setwd("D:/STIS/Semester 6/4.Analisis Peubah Ganda/R/Excel")
library(readxl)
X3SI1 <- read_excel("3SI1.xlsx")
View(X3SI1)
X3SI1
dataset = X3SI1[,c(2,3,5,6,7,8,9,10)]
dataset = X3SI1[,c(2,3,5,6,7,8,9)]
colMeans(dataset)
cov(dataset)
# Untuk semua
cor(dataset)
pairs(dataset)
pairs(dataset)
heatmap(x,Rowv = NA, Colv = NA)
stars(dataset,locations =c(0,0), radius = FALSE, key.loc =c(0,0) , main = "Motor Trend Cars",lty=2)
install.packages("aplpack")
library(aplpack)
faces(dataset[1:10,],face.type=1)
dataset
x1 = dataset[,c(3,5,7)]
x1
cor(x1)
pairs(x1)
faces(x1[1:10,],face.type=1)
